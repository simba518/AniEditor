#include <iostream>
#include <boost/test/unit_test.hpp>
#include <UnitTestAssert.h>
#include <eigen3/Eigen/Dense>
#include <DrawCurves.h>
#include "DFT.h"
using namespace std;
using namespace Eigen;

BOOST_AUTO_TEST_SUITE(DFTTest)

BOOST_AUTO_TEST_CASE(testfun){

  // compare the with data generated by maxima.
  VectorXd inreal(8),inimag(8);
  inreal << 1, 1, 1, -1, -1, 1, 1, 1;
  inimag << 0, 1, -1, 0, 0, -1, 1, 0;

  VectorXd outreal,outimag,outreal_c(8),outimag_c(8);
  outreal_c << 0.5,0.5,-0.25,-0.3535533906,0,0.5,-0.25,0.3535533906;
  outimag_c << 0,0,0.25,-0.3535533906,0,0,-0.25,0.3535533906;

  computeDFT(inreal,inimag,outreal,outimag);
  ASSERT_EQ(outreal.size(),outreal_c.size());
  ASSERT_EQ(outimag.size(),outimag_c.size());
  ASSERT_EQ_SMALL_VEC_TOL (outreal,outreal_c,outreal_c.size(),1e-9);
  ASSERT_EQ_SMALL_VEC_TOL (outimag,outimag_c,outimag_c.size(),1e-9);

  inreal << 1, 2, 3, 4, -1, -2, -3, -4;
  outreal_c << 0,-0.1035533906,0,0.6035533906,0,0.6035533906,0,-0.1035533906;
  outimag_c << 0,1.810660172,0,0.3106601718,0,-0.3106601718,0,-1.810660172;

  computeDFT(inreal,outreal,outimag);
  ASSERT_EQ(outreal.size(),outreal_c.size());
  ASSERT_EQ(outimag.size(),outimag_c.size());
  ASSERT_EQ_SMALL_VEC_TOL (outreal,outreal_c,outreal_c.size(),1e-9);
  ASSERT_EQ_SMALL_VEC_TOL (outimag,outimag_c,outimag_c.size(),1e-9);

  inreal.resize(4);
  inreal << 8,4,8,0;
  computeDFT(inreal,outreal,outimag);
  cout << outreal << endl << endl;
  cout << outimag << endl << endl;
}

BOOST_AUTO_TEST_CASE(testSin){

  VectorXd inreal(100),outreal,outimag;

  const double h = 1.0f/(double)inreal.size()*2.0f*M_PI;
  for (int i = 0; i < inreal.size(); ++i){
    inreal[i] = sin(i*h) + 10.0f + 2.5f*cos(i*3.0*h);
  }

  computeDFT(inreal,outreal,outimag); 

  UTILITY::PythonScriptDraw2DCurves<VectorXd>::write("dftin.py",inreal,h,0.0f);
  UTILITY::PythonScriptDraw2DCurves<VectorXd> out;
  out.add("real",outreal,1.0,0.0f,"o");
  out.add("imag",outimag,1.0,0.0f,"*");
  out.write("dftout.py");
}

BOOST_AUTO_TEST_SUITE_END()
